pipeline {
    agent any

    environment {
        // Set max JVM heap size for maven
        MAVEN_OPTS = '-Xmx1024m'
    }

    stages {
        // Build the project
        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn -B -DskipTests -f academi-co/pom.xml clean package'
            }
        }

        // Launches the containers used for testing
        stage('RunTestsContainers') {
            agent {
                docker {
                    image 'docker'
                    args '--net="host" --entrypoint=""'
                }
            }
            steps {
                sh 'sh Jenkins/Scripts/Database/runDatabaseTests.sh'
                sh 'sh Jenkins/Scripts/AppserverIntegrationTests/runAppServerTests.sh'
            }
        }

        // Launches the tests
        stage('Tests') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn -f academi-co/pom.xml test'
            }
            post {
                always {
                    junit 'academi-co/target/surefire-reports/*.xml'
                }
            }
        }

        // Deliver the project
        stage('Deliver') {
            agent {
                docker {
                    image 'docker'
                    args '--net="host" --entrypoint="" -v /:/tmp/server'
                }
            }
            steps {
                sh 'sh Jenkins/Scripts/Database/runDatabase.sh'
                sh 'sh Jenkins/Scripts/Appserver/runAppServer.sh'
                sh 'sh Jenkins/Scripts/deploy.sh'
            }
        }
    }

    post {
        // Kill all test containers
        always {
            sh 'sh Jenkins/Scripts/AppserverIntegrationTests/killAppServerTests.sh'
            sh 'sh Jenkins/Scripts/Database/killDatabaseTests.sh'
        }

        // Send e-mail
        success {
            emailext (
                subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                to: 'Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],

                body: """SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':

                Check console output at '${env.BUILD_URL}'
                Last commit: '${env.GIT_COMMIT}'"""
            )
        }

        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                to: 'Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],

                body: """FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':

                Check console output at '${env.BUILD_URL}'
                Last commit: '${env.GIT_COMMIT}'"""
            )
        }
    }
}
