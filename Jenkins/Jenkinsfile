pipeline {
    agent any

    environment {
        // Set max JVM heap size for maven
        MAVEN_OPTS = '-Xmx512m'
        // Set all variables
        ACADEMI_CO_NETWORK = 'academi_co_network'

        IMAGE_DB = 'academi_co_mysql'
        IMAGE_APPSERVER = 'academi_co_wildfly'
        IMAGE_APPSERVER_IT = 'academi_co_wildfly_tests'

        DOCKER_DB = 'concealed_cader' // 172.18.0.1
        DOCKER_DB_IT = 'shady_selimi' // 172.18.0.3
        DOCKER_APPSERVER = 'cheeky_binko' // 172.18.0.2
        DOCKER_APPSERVER_IT = 'bodacious_goren' // 172.18.0.4

        // Scripts: script.sh network image container [...]
    }

    stages {
        // Build the project
        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn -B -DskipTests -f academi-co/pom.xml clean package'
            }
        }

        // Launches the containers used for testing
        stage('RunTestsContainers') {
            agent {
                docker {
                    image 'docker'
                    args '--net="host" --entrypoint=""'
                }
            }
            steps {
                sh 'sh Jenkins/Scripts/Database/runDatabaseTests.sh \
                    ${ACADEMI_CO_NETWORK} ${IMAGE_DB} ${DOCKER_DB_IT}'
                sh 'sh Jenkins/Scripts/AppserverIntegrationTests/runAppServerTests.sh \
                    ${ACADEMI_CO_NETWORK} ${IMAGE_APPSERVER_IT} ${DOCKER_APPSERVER_IT}'
            }
        }

        // // Launches the tests
        // stage('Tests') {
        //     agent {
        //         docker {
        //             image 'maven:3-alpine'
        //             args '-v /root/.m2:/root/.m2'
        //         }
        //     }
        //     steps {
        //         sh 'mvn -f academi-co/pom.xml test'
        //     }
        //     post {
        //         always {
        //             junit 'academi-co/target/surefire-reports/*.xml'
        //         }
        //     }
        // }
        //
        // // Deliver the project
        // stage('Deliver') {
        //     agent {
        //         docker {
        //             image 'docker'
        //             args '--net="host" --entrypoint="" -v /:/tmp/server'
        //         }
        //     }
        //     steps {
        //         sh 'sh Jenkins/Scripts/Database/runDatabase.sh \
        //             ${ACADEMI_CO_NETWORK} ${IMAGE_DB} ${DOCKER_DB}'
        //         sh 'sh Jenkins/Scripts/Appserver/runAppServer.sh \
        //             ${ACADEMI_CO_NETWORK} ${IMAGE_APPSERVER} ${DOCKER_APPSERVER}'
        //         sh 'sh Jenkins/Scripts/deploy.sh'
        //     }
        // }
    }

    post {
        // Kill all test containers
        always {
            sh 'sh Jenkins/Scripts/AppserverIntegrationTests/killAppServerTests.sh ${DOCKER_APPSERVER_IT}'
            sh 'sh Jenkins/Scripts/Database/killDatabaseTests.sh ${DOCKER_DB_IT}'
        }

        // Send e-mail
        success {
            emailext (
                subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                to: 'Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],

                body: """SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':

                Check console output at '${env.BUILD_URL}'
                Last commit: '${env.GIT_COMMIT}'"""
            )
        }

        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                to: 'Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],

                body: """FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':

                Check console output at '${env.BUILD_URL}'
                Last commit: '${env.GIT_COMMIT}'"""
            )
        }
    }
}
