pipeline {
    agent any

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean install -B -DskipTests=true -f academi-co/pom.xml'
            }
        }

        stage('Unit Tests') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean verify -f academi-co/pom.xml -DskipITs=true'
            }
            post {
                always {
                    junit 'academi-co/target/surefire-reports/*.xml'
                }
            }
        }

        stage('RunTestsContainers') {
            agent {
                docker {
                    image 'docker'
                    args '--net="host"'
                }
            }
            steps {
                sh 'sh Jenkins/Scripts/AppserverIntegrationTests/runAppServerTests.sh'
                sh 'sh Jenkins/Scripts/Database/runDatabaseTests.sh'
            }
        }

        stage('Integration Tests') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean verify -f academi-co/pom.xml -Dsurefire.skip=true'
            }
            post {
                always {
                    junit 'academi-co/target/surefire-reports/*.xml'
                }
            }
        }

        stage('RunBuildContainers') {
            agent {
                docker {
                    image 'docker'
                    args '--net="host"'
                }
            }
            steps {
                sh 'sh Jenkins/Scripts/Appserver/runAppServer.sh'
                sh 'sh Jenkins/Scripts/Database/runDatabase.sh'
            }
        }
    }

    post {
        always {
            sh 'sh Jenkins/Scripts/AppserverIntegrationTests/killAppServerTests.sh'
            sh 'sh Jenkins/Scripts/Database/killDatabaseTests.sh'
            sh 'docker system prune -fa'
        }

        success {
            emailext (
                subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                to: 'Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],

                body: """SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':

                Check console output at '${env.BUILD_URL}'
                Last commit: '${env.GIT_COMMIT}'"""
            )
        }

        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                to: 'Nicolas.Cotte.1@etu.unige.ch, Petr.Binko@etu.unige.ch',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],

                body: """FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':

                Check console output at '${env.BUILD_URL}'
                Last commit: '${env.GIT_COMMIT}'"""
            )
        }
    }
}
